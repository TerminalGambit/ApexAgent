import argparse
import os
import pickle
from datetime import date
from jinja2 import Template
import subprocess

def escape_latex(s):
    if not isinstance(s, str):
        return s
    return s.replace('#', r'\#')

def clean_images(base_dir):
    # Remove all PNG files in the directory
    removed = []
    for fname in os.listdir(base_dir):
        if fname.endswith('.png'):
            fpath = os.path.join(base_dir, fname)
            try:
                os.remove(fpath)
                removed.append(fname)
            except Exception as e:
                print(f"[WARN] Could not remove {fname}: {e}")
    if removed:
        print(f"[INFO] Removed image files: {', '.join(removed)}")
    else:
        print("[INFO] No image files to remove.")

def generate_report(year, race_name, author="F1-ML Pipeline"):
    base_dir = f"data/processed/{year}/{race_name}"
    report_path = os.path.join(base_dir, "report_data.pkl")
    if not os.path.exists(report_path):
        print(f"Report data not found: {report_path}")
        return
    with open(report_path, 'rb') as f:
        report = pickle.load(f)

    # Escape # in captions and titles
    for fig in report.values():
        fig['caption'] = escape_latex(fig['caption'])
        fig['interpretation'] = escape_latex(fig['interpretation'])

    latex_template = r'''
\documentclass{article}
\usepackage{graphicx}
\usepackage{geometry}
\geometry{margin=1in}
\title{F1 Monaco 2024 Data Analysis}
\author{ {{ author }} }
\date{ {{ today }} }
\begin{document}
\maketitle

\section*{Introduction}
This report provides an automated analysis of Formula 1 lap data for the Monaco 2024 Grand Prix. It includes visualizations and interpretations generated by the F1-ML pipeline.

{% for key, fig in report.items() %}
\section*{ {{ fig.caption }} }
\begin{figure}[h!]
    \centering
    \includegraphics[width=0.8\textwidth]{ {{ fig.path }} }
    \caption{ {{ fig.caption }} }
\end{figure}

\textbf{Interpretation:} {{ fig.interpretation }}

{% endfor %}

\end{document}
'''
    today = date.today().strftime("%B %d, %Y")
    template = Template(latex_template)
    rendered = template.render(report=report, author=author, today=today)

    tex_path = os.path.join(base_dir, "f1_monaco_2024_report.tex")
    with open(tex_path, "w") as f:
        f.write(rendered)
    print(f"[INFO] LaTeX report written to {tex_path}")

    # Optionally, compile to PDF if pdflatex is available
    try:
        subprocess.run(["pdflatex", "-output-directory", base_dir, tex_path], check=True)
        print(f"[INFO] PDF report generated at {os.path.join(base_dir, 'f1_monaco_2024_report.pdf')}")
    except Exception as e:
        print(f"[WARN] Could not compile PDF automatically: {e}")
        print("You can compile the .tex file manually with pdflatex.")

    # Clean up images
    clean_images(base_dir)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate LaTeX report from F1-ML analysis.")
    parser.add_argument("--year", type=int, default=2024)
    parser.add_argument("--race", type=str, default="Monaco Grand Prix")
    parser.add_argument("--author", type=str, default="F1-ML Pipeline")
    args = parser.parse_args()
    generate_report(args.year, args.race, args.author) 